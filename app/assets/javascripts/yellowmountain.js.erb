var isMobile = false;
var WIDTH, HEIGHT;
var VIEW_ANGLE, ASPECT, NEAR, FAR;
var camera, scene1, scene2, renderer;
var rendered = false;

function set_variables(){
  $('#mountain').css({'height':'40vh','min-height':'250px'}); // Setting height dynamically means we don't screw with the div-size for our responsive image placeholder
  // Tried pushing the size down to 35vh - 36 was good - but pixellation artefacts are showing.
  // LOOKINTO: Maintaining the quality of the texture - no pixellation. We've already set it to a ^2 size. What else can we do?
  // device detection
  if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) isMobile = true;
  WIDTH = document.getElementById("mountain").offsetWidth;
  HEIGHT = document.getElementById("mountain").offsetHeight;
  VIEW_ANGLE = 55;
  ASPECT = WIDTH / HEIGHT;
  NEAR = 0.1;
  FAR = 1000;
}

$(document).ready(function(){

  if (Detector.webgl){
    set_variables();

    scene1 = new THREE.Scene();
    scene2 = new THREE.Scene();
    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR );

    if (!renderer){
      renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
      renderer.setPixelRatio( window.devicePixelRatio ); // ALWAYS, ALWAYS, ALWAYS set this before setting the size... obviously. I mean duh.
      renderer.setSize( WIDTH, HEIGHT );
      renderer.autoClear = false;
    }
    $('#mountain').html(renderer.domElement);
    //document.getElementById("mountain").appendChild( renderer.domElement );

    loader = new THREE.JSONLoader();
    var material = new THREE.MeshLambertMaterial( { color: 0xffdc00, shading: THREE.FlatShading } );

    var mouseX = 0, mouseY = 0;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;
    var orientationX = -1.3, orientationY = 0, screenOrientation = 0;

    loader.load("<%= asset_path('yellowmountain.json') %>", function ( geometry ) {
      mountain = new THREE.Mesh(geometry, material);
      mountain.rotation.y = -1.3;
      scene1.add( mountain );
    });

    var planegeometry = new THREE.PlaneBufferGeometry(8, 2 );
    var planematerial = new THREE.MeshBasicMaterial( {color: 0xefefef, opacity:0, transparent: true} ); // Setting planematerial before planetexture because plaintexture provides a callback to it and new pages via turbolinks complain about order.
    // Note that this means that .map is not set above, but that's okay...
    THREE.ImageUtils.crossOrigin = ''
    var planetexture = new THREE.ImageUtils.loadTexture("<%= image_path('YMTextpw2.png') %>", null, function(){
      planematerial.opacity = 1;
    });
    planetexture.magFilter = THREE.NearestFilter;
    planetexture.minFilter = THREE.NearestFilter;
    planematerial.map = planetexture; // we set it here, now having been provided the texture.
    var plane = new THREE.Mesh( planegeometry, planematerial );
    scene2.add( plane );
    // And Jesus wept! For there were no more worlds to conquer.

    plane.position.y = -0.85;
    plane.scale.set(0.5,0.5,0.5);

    var ambient = new THREE.AmbientLight( 0x404040 );
    scene1.add( ambient );

    var point = new THREE.PointLight( 0xffffff, 1, 75 );
    point.position.set( 16, 16, 16 );
    scene1.add( point );

    camera.position.z = 3.2;
    camera.position.y = 0.5;


    function onWindowResize() {
      windowHalfX = window.innerWidth / 2;
      windowHalfY = window.innerHeight / 2;

      camera.aspect = document.getElementById("mountain").offsetWidth / document.getElementById("mountain").offsetHeight;
      camera.updateProjectionMatrix();

      renderer.setSize( document.getElementById("mountain").offsetWidth, document.getElementById("mountain").offsetHeight );

    }
    window.addEventListener( 'resize', onWindowResize, false ); // Had to move this and onDocumentMouseMove because Firefox needed them to be defined BEFORE they were used. No problem... Just... Yeah. I expect it has something to do with document ready.

    function onDocumentMouseMove( event ) {

      mouseX = ( event.clientX - windowHalfX );
      mouseY = ( event.clientY - windowHalfY );

    }
    function onScreenOrientationChangeEvent( event ) {

      screenOrientation = window.orientation || 0;

    }
    function onDeviceOrientationChangeEvent( event ) {

      orientationX = event.beta;
      orientationY = event.gamma;

      //$('#orientation').html("X: " + parseInt(orientationX) + ", Y: " + parseInt(orientationY));

    }

    if(isMobile && typeof window.DeviceOrientationEvent != "undefined"){
      window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );
      window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );
    }else{
      document.addEventListener( 'mousemove', onDocumentMouseMove, false );
    }

    function render() {
      requestAnimationFrame( render );
      if(mountain.rotation){
        if(isMobile && typeof window.DeviceOrientationEvent != "undefined"){
          if(screenOrientation == 0){
            if(orientationY > 90 || orientationY < -90){
              mountain.rotation.y = THREE.Math.degToRad( orientationY - 180 ) - 1.3;
            }else{
              mountain.rotation.y = THREE.Math.degToRad( orientationY ) - 1.3;
            }
            //mountain.rotation.x = THREE.Math.degToRad( orientationX );
          }else if(screenOrientation == 90){
            //mountain.rotation.x = THREE.Math.degToRad( - orientationY );
            if(orientationX < -90 || orientationX > 90){
              mountain.rotation.y = THREE.Math.degToRad( orientationX - 180 ) - 1.3;
            }else{
              mountain.rotation.y = THREE.Math.degToRad( orientationX ) - 1.3;
            }
          }else if(screenOrientation == -90){
            //mountain.rotation.x = THREE.Math.degToRad( orientationY );
            if(orientationX < -90 || orientationX > 90){
              mountain.rotation.y = THREE.Math.degToRad( - orientationX - 180 ) - 1.3;
            }else{
              mountain.rotation.y = THREE.Math.degToRad( - orientationX ) - 1.3;
            }
          }else if(screenOrientation == 180){
            if(orientationY > 90 || orientationY < -90){
              mountain.rotation.y = THREE.Math.degToRad( - orientationY - 180 ) - 1.3;
            }else{
              mountain.rotation.y = THREE.Math.degToRad( - orientationY ) - 1.3;
            }
            //mountain.rotation.x = THREE.Math.degToRad( - orientationX );
          }
        }else{
          mountain.rotation.y = ( - mouseX - mountain.rotation.y ) * 0.0006 -1.3;
          mountain.rotation.x = ( - mouseY - mountain.rotation.x ) * 0.0003;
        }
      }

      renderer.clear();
      renderer.render( scene1, camera );
      renderer.clearDepth();
      renderer.render( scene2, camera );
      rendered = true;
    }
    if(!rendered){
      if(isMobile && typeof window.DeviceOrientationEvent != "undefined"){
        onScreenOrientationChangeEvent();
      }
      render();
    }
  }
})
